// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  CallReducerFlags,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  DbContext,
  ErrorContextInterface,
  Event,
  EventContextInterface,
  Identity,
  ProductType,
  ProductTypeElement,
  ReducerEventContextInterface,
  SubscriptionBuilderImpl,
  SubscriptionEventContextInterface,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
} from "@clockworklabs/spacetimedb-sdk";

// Import and reexport all reducer arg types
import { GameTick } from "./game_tick_reducer.ts";
export { GameTick };
import { IdentityConnected } from "./identity_connected_reducer.ts";
export { IdentityConnected };
import { IdentityDisconnected } from "./identity_disconnected_reducer.ts";
export { IdentityDisconnected };
import { RegisterPlayer } from "./register_player_reducer.ts";
export { RegisterPlayer };
import { UpdatePlayerInput } from "./update_player_input_reducer.ts";
export { UpdatePlayerInput };

// Import and reexport all table handle types
import { GameTickScheduleTableHandle } from "./game_tick_schedule_table.ts";
export { GameTickScheduleTableHandle };
import { LoggedOutPlayerTableHandle } from "./logged_out_player_table.ts";
export { LoggedOutPlayerTableHandle };
import { PlayerTableHandle } from "./player_table.ts";
export { PlayerTableHandle };

// Import and reexport all types
import { GameTickSchedule } from "./game_tick_schedule_type.ts";
export { GameTickSchedule };
import { InputState } from "./input_state_type.ts";
export { InputState };
import { LoggedOutPlayerData } from "./logged_out_player_data_type.ts";
export { LoggedOutPlayerData };
import { PlayerData } from "./player_data_type.ts";
export { PlayerData };
import { Vector3 } from "./vector_3_type.ts";
export { Vector3 };

const REMOTE_MODULE = {
  tables: {
    game_tick_schedule: {
      tableName: "game_tick_schedule",
      rowType: GameTickSchedule.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
    },
    logged_out_player: {
      tableName: "logged_out_player",
      rowType: LoggedOutPlayerData.getTypeScriptAlgebraicType(),
      primaryKey: "identity",
    },
    player: {
      tableName: "player",
      rowType: PlayerData.getTypeScriptAlgebraicType(),
      primaryKey: "identity",
    },
  },
  reducers: {
    game_tick: {
      reducerName: "game_tick",
      argsType: GameTick.getTypeScriptAlgebraicType(),
    },
    identity_connected: {
      reducerName: "identity_connected",
      argsType: IdentityConnected.getTypeScriptAlgebraicType(),
    },
    identity_disconnected: {
      reducerName: "identity_disconnected",
      argsType: IdentityDisconnected.getTypeScriptAlgebraicType(),
    },
    register_player: {
      reducerName: "register_player",
      argsType: RegisterPlayer.getTypeScriptAlgebraicType(),
    },
    update_player_input: {
      reducerName: "update_player_input",
      argsType: UpdatePlayerInput.getTypeScriptAlgebraicType(),
    },
  },
  // Constructors which are used by the DbConnectionImpl to
  // extract type information from the generated RemoteModule.
  //
  // NOTE: This is not strictly necessary for `eventContextConstructor` because
  // all we do is build a TypeScript object which we could have done inside the
  // SDK, but if in the future we wanted to create a class this would be
  // necessary because classes have methods, so we'll keep it.
  eventContextConstructor: (imp: DbConnectionImpl, event: Event<Reducer>) => {
    return {
      ...(imp as DbConnection),
      event
    }
  },
  dbViewConstructor: (imp: DbConnectionImpl) => {
    return new RemoteTables(imp);
  },
  reducersConstructor: (imp: DbConnectionImpl, setReducerFlags: SetReducerFlags) => {
    return new RemoteReducers(imp, setReducerFlags);
  },
  setReducerFlagsConstructor: () => {
    return new SetReducerFlags();
  }
}

// A type representing all the possible variants of a reducer.
export type Reducer = never
| { name: "GameTick", args: GameTick }
| { name: "IdentityConnected", args: IdentityConnected }
| { name: "IdentityDisconnected", args: IdentityDisconnected }
| { name: "RegisterPlayer", args: RegisterPlayer }
| { name: "UpdatePlayerInput", args: UpdatePlayerInput }
;

export class RemoteReducers {
  constructor(private connection: DbConnectionImpl, private setCallReducerFlags: SetReducerFlags) {}

  gameTick(tickInfo: GameTickSchedule) {
    const __args = { tickInfo };
    let __writer = new BinaryWriter(1024);
    GameTick.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("game_tick", __argsBuffer, this.setCallReducerFlags.gameTickFlags);
  }

  onGameTick(callback: (ctx: ReducerEventContext, tickInfo: GameTickSchedule) => void) {
    this.connection.onReducer("game_tick", callback);
  }

  removeOnGameTick(callback: (ctx: ReducerEventContext, tickInfo: GameTickSchedule) => void) {
    this.connection.offReducer("game_tick", callback);
  }

  onIdentityConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("identity_connected", callback);
  }

  removeOnIdentityConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("identity_connected", callback);
  }

  onIdentityDisconnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("identity_disconnected", callback);
  }

  removeOnIdentityDisconnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("identity_disconnected", callback);
  }

  registerPlayer(username: string, characterClass: string) {
    const __args = { username, characterClass };
    let __writer = new BinaryWriter(1024);
    RegisterPlayer.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("register_player", __argsBuffer, this.setCallReducerFlags.registerPlayerFlags);
  }

  onRegisterPlayer(callback: (ctx: ReducerEventContext, username: string, characterClass: string) => void) {
    this.connection.onReducer("register_player", callback);
  }

  removeOnRegisterPlayer(callback: (ctx: ReducerEventContext, username: string, characterClass: string) => void) {
    this.connection.offReducer("register_player", callback);
  }

  updatePlayerInput(input: InputState, clientPos: Vector3, clientRot: Vector3, clientAnimation: string) {
    const __args = { input, clientPos, clientRot, clientAnimation };
    let __writer = new BinaryWriter(1024);
    UpdatePlayerInput.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("update_player_input", __argsBuffer, this.setCallReducerFlags.updatePlayerInputFlags);
  }

  onUpdatePlayerInput(callback: (ctx: ReducerEventContext, input: InputState, clientPos: Vector3, clientRot: Vector3, clientAnimation: string) => void) {
    this.connection.onReducer("update_player_input", callback);
  }

  removeOnUpdatePlayerInput(callback: (ctx: ReducerEventContext, input: InputState, clientPos: Vector3, clientRot: Vector3, clientAnimation: string) => void) {
    this.connection.offReducer("update_player_input", callback);
  }

}

export class SetReducerFlags {
  gameTickFlags: CallReducerFlags = 'FullUpdate';
  gameTick(flags: CallReducerFlags) {
    this.gameTickFlags = flags;
  }

  registerPlayerFlags: CallReducerFlags = 'FullUpdate';
  registerPlayer(flags: CallReducerFlags) {
    this.registerPlayerFlags = flags;
  }

  updatePlayerInputFlags: CallReducerFlags = 'FullUpdate';
  updatePlayerInput(flags: CallReducerFlags) {
    this.updatePlayerInputFlags = flags;
  }

}

export class RemoteTables {
  constructor(private connection: DbConnectionImpl) {}

  get gameTickSchedule(): GameTickScheduleTableHandle {
    return new GameTickScheduleTableHandle(this.connection.clientCache.getOrCreateTable<GameTickSchedule>(REMOTE_MODULE.tables.game_tick_schedule));
  }

  get loggedOutPlayer(): LoggedOutPlayerTableHandle {
    return new LoggedOutPlayerTableHandle(this.connection.clientCache.getOrCreateTable<LoggedOutPlayerData>(REMOTE_MODULE.tables.logged_out_player));
  }

  get player(): PlayerTableHandle {
    return new PlayerTableHandle(this.connection.clientCache.getOrCreateTable<PlayerData>(REMOTE_MODULE.tables.player));
  }
}

export class SubscriptionBuilder extends SubscriptionBuilderImpl<RemoteTables, RemoteReducers, SetReducerFlags> { }

export class DbConnection extends DbConnectionImpl<RemoteTables, RemoteReducers, SetReducerFlags> {
  static builder = (): DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext> => {
    return new DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext>(REMOTE_MODULE, (imp: DbConnectionImpl) => imp as DbConnection);
  }
  subscriptionBuilder = (): SubscriptionBuilder => {
    return new SubscriptionBuilder(this);
  }
}

export type EventContext = EventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type ReducerEventContext = ReducerEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type SubscriptionEventContext = SubscriptionEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
export type ErrorContext = ErrorContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
